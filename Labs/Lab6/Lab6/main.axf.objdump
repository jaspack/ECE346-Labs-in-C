
C:/Users/Jason/Documents/GitHub/ECE346-Labs-in-C/Labs/Lab6/Lab6/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	f8 02 00 00 fc 02 00 00 00 03 00 00 04 03 00 00     ................
  30:	08 03 00 00 f4 06 00 00 b8 02 00 00 0c 03 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb00016d 	bl	690 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	000007dc 	.word	0x000007dc

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000c18 	.word	0x00000c18

00000124 <__cs3_heap_start_ptr>:
 124:	00000c40 	.word	0x00000c40

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000c20 	.word	0x00000c20
 170:	00000c23 	.word	0x00000c23
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000c20 	.word	0x00000c20
 1bc:	00000c20 	.word	0x00000c20
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000c20 	.word	0x00000c20
 200:	00000000 	.word	0x00000000
 204:	00000780 	.word	0x00000780

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000780 	.word	0x00000780
 250:	00000c24 	.word	0x00000c24
 254:	000007e0 	.word	0x000007e0
 258:	00000000 	.word	0x00000000

0000025c <main>:
#include"../../Utility/address_map_arm.h"
#include"interrupt.h"

void main(void)
{
 25c:	e92d4008 	push	{r3, lr}
    set_A9_IRQ_stack();
 260:	eb00002a 	bl	310 <set_A9_IRQ_stack>

    enable_A9_interrupts();
 264:	eb000030 	bl	32c <enable_A9_interrupts>

    ConfigureGIC();
 268:	eb000032 	bl	338 <ConfigureGIC>
	/* setup the interval timer interrupts in the FPGA */

    volatile int* interval_timer_ptr = (int*)TIMER_BASE; // interal timer base address

    int counter = 100000000; // 1/(100 MHz) x 1x10^8 = 1 sec
    *(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
 26c:	e3a03a02 	mov	r3, #8192	; 0x2000
 270:	e34f3f20 	movt	r3, #65312	; 0xff20
 274:	e3a02ce1 	mov	r2, #57600	; 0xe100
 278:	e5832008 	str	r2, [r3, #8]
    *(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
 27c:	e30025f5 	movw	r2, #1525	; 0x5f5
 280:	e583200c 	str	r2, [r3, #12]

    /* start interval timer, enable its interrupts */
    *(interval_timer_ptr + 1) = 0x7; // STOP = 0, START = 1, CONT = 1, ITO = 1	
 284:	e3a02007 	mov	r2, #7
 288:	e5832004 	str	r2, [r3, #4]
 28c:	eafffffe 	b	28c <main+0x30>

00000290 <interval_timer_ISR>:
#include "../../Utility/address_map_arm.h"

void interval_timer_ISR()
{
    volatile int * interval_timer_ptr = (int *)TIMER_BASE;
    *(interval_timer_ptr) = 0; // Clear the interrupt
 290:	e3a03a02 	mov	r3, #8192	; 0x2000
 294:	e34f3f20 	movt	r3, #65312	; 0xff20
 298:	e3a02000 	mov	r2, #0
 29c:	e5832000 	str	r2, [r3]
    int* LED = (int*)LED_BASE;

    unsigned int cur = *LED;
    unsigned int flip = 0b11111111;
    flip = cur ^ flip;
    *LED = flip;
 2a0:	e1a03002 	mov	r3, r2
 2a4:	e34f3f20 	movt	r3, #65312	; 0xff20

    int* LED = (int*)LED_BASE;

    unsigned int cur = *LED;
    unsigned int flip = 0b11111111;
    flip = cur ^ flip;
 2a8:	e5932000 	ldr	r2, [r3]
 2ac:	e22220ff 	eor	r2, r2, #255	; 0xff
    *LED = flip;
 2b0:	e5832000 	str	r2, [r3]
 2b4:	e12fff1e 	bx	lr

000002b8 <__cs3_isr_irq>:
#include"interval_timer_ISR.h"
#include"interrupt_ID.h"
#include"defines.h"

void __attribute__((interrupt)) __cs3_isr_irq(void)
{
 2b8:	e24ee004 	sub	lr, lr, #4
 2bc:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
    // Read the ICCIAR from the processor interface
    int address = MPCORE_GIC_CPUIF + ICCIAR;
    int int_ID = *((int*)address);
 2c0:	e3e03a13 	mvn	r3, #77824	; 0x13000
 2c4:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d
    
    if (int_ID == HPS_TIMER0_IRQ) // check if interrupt is from the HPS timer
 2c8:	e35400c7 	cmp	r4, #199	; 0xc7
 2cc:	0a000006 	beq	2ec <__cs3_isr_irq+0x34>
        ;   // Not used so skip
    else if (int_ID == INTERVAL_TIMER_IRQ) // check if interrupt is from the Altera timer
 2d0:	e3540048 	cmp	r4, #72	; 0x48
 2d4:	1a000001 	bne	2e0 <__cs3_isr_irq+0x28>
        interval_timer_ISR();
 2d8:	ebffffec 	bl	290 <interval_timer_ISR>
 2dc:	ea000002 	b	2ec <__cs3_isr_irq+0x34>
    else if (int_ID == KEYS_IRQ) // check if interrupt is from the KEYs
 2e0:	e3540049 	cmp	r4, #73	; 0x49
 2e4:	0a000000 	beq	2ec <__cs3_isr_irq+0x34>
 2e8:	eafffffe 	b	2e8 <__cs3_isr_irq+0x30>
        while (1)
            ; // if unexpected, then stay here

    // Write to the End of Interrupt Register (ICCEOIR)
    address = MPCORE_GIC_CPUIF + ICCEOIR;
    *((int*)address) = int_ID;
 2ec:	e3e03a13 	mvn	r3, #77824	; 0x13000
 2f0:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
 2f4:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

000002f8 <__cs3_reset>:
    return;
}

// Define the remaining exception handlers
void __attribute__((interrupt)) __cs3_reset(void)
{while (1);}
 2f8:	eafffffe 	b	2f8 <__cs3_reset>

000002fc <__cs3_isr_undef>:

void __attribute__((interrupt)) __cs3_isr_undef(void)
{while (1);}
 2fc:	eafffffe 	b	2fc <__cs3_isr_undef>

00000300 <__cs3_isr_swi>:

void __attribute__((interrupt)) __cs3_isr_swi(void)
{while (1);}
 300:	eafffffe 	b	300 <__cs3_isr_swi>

00000304 <__cs3_isr_pabort>:

void __attribute__((interrupt)) __cs3_isr_pabort(void)
{while (1);}
 304:	eafffffe 	b	304 <__cs3_isr_pabort>

00000308 <__cs3_isr_dabort>:

void __attribute__((interrupt)) __cs3_isr_dabort(void)
{while (1);}
 308:	eafffffe 	b	308 <__cs3_isr_dabort>

0000030c <__cs3_isr_fiq>:

void __attribute__((interrupt)) __cs3_isr_fiq(void)
{while (1);}
 30c:	eafffffe 	b	30c <__cs3_isr_fiq>

00000310 <set_A9_IRQ_stack>:
    int stack, mode;
    // top of A9 onchip memory, aligned to 8 bytes
    stack = A9_ONCHIP_END - 7; 
    // change processor to IRQ mode with interrupts disabled 
    mode = INT_DISABLE | IRQ_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
 310:	e3a030d2 	mov	r3, #210	; 0xd2
 314:	e129f003 	msr	CPSR_fc, r3
    // set banked stack pointer
    asm("mov sp, %[ps]" : : [ps] "r"(stack));
 318:	e3e03007 	mvn	r3, #7
 31c:	e1a0d003 	mov	sp, r3

    // go back to SVC mode before executing subroutine return!
    mode = INT_DISABLE | SVC_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
 320:	e3a030d3 	mov	r3, #211	; 0xd3
 324:	e129f003 	msr	CPSR_fc, r3
 328:	e12fff1e 	bx	lr

0000032c <enable_A9_interrupts>:

// Turn on interrupts in the ARM processor
void enable_A9_interrupts(void)
{
    int status = SVC_MODE | INT_ENABLE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(status));
 32c:	e3a03053 	mov	r3, #83	; 0x53
 330:	e129f003 	msr	CPSR_fc, r3
 334:	e12fff1e 	bx	lr

00000338 <ConfigureGIC>:

// Configure the Generic Interrupt Controller (GIC)
void ConfigureGIC(void)
{
    // Configure the FPGA IRQ0(interval timer)
    *((int*)0xFFFED848) = 0x00000001;
 338:	e3e03a12 	mvn	r3, #73728	; 0x12000
 33c:	e3a02001 	mov	r2, #1
 340:	e50327b7 	str	r2, [r3, #-1975]	; 0xfffff849
    *((int*)0xFFFED108) = 0x00000100;
 344:	e3a01c01 	mov	r1, #256	; 0x100
 348:	e5031ef7 	str	r1, [r3, #-3831]	; 0xfffff109

    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities
    *((int*)(MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
 34c:	e3e01a13 	mvn	r1, #77824	; 0x13000
 350:	e30f0fff 	movw	r0, #65535	; 0xffff
 354:	e5010efb 	str	r0, [r1, #-3835]	; 0xfffff105

    // Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
    *((int*)(MPCORE_GIC_CPUIF + ICCICR)) = 0x1;
 358:	e5012eff 	str	r2, [r1, #-3839]	; 0xfffff101

    // Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs
    *((int*)(MPCORE_GIC_DIST + ICDDCR)) = 0x1;
 35c:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
 360:	e12fff1e 	bx	lr

00000364 <atexit>:
 364:	e1a01000 	mov	r1, r0
 368:	e3a00000 	mov	r0, #0
 36c:	e92d4008 	push	{r3, lr}
 370:	e1a02000 	mov	r2, r0
 374:	e1a03000 	mov	r3, r0
 378:	eb00000e 	bl	3b8 <__register_exitproc>
 37c:	e8bd4008 	pop	{r3, lr}
 380:	e12fff1e 	bx	lr

00000384 <exit>:
 384:	e92d4008 	push	{r3, lr}
 388:	e3a01000 	mov	r1, #0
 38c:	e1a04000 	mov	r4, r0
 390:	eb000045 	bl	4ac <__call_exitprocs>
 394:	e59f3018 	ldr	r3, [pc, #24]	; 3b4 <exit+0x30>
 398:	e5930000 	ldr	r0, [r3]
 39c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 3a0:	e3530000 	cmp	r3, #0
 3a4:	11a0e00f 	movne	lr, pc
 3a8:	112fff13 	bxne	r3
 3ac:	e1a00004 	mov	r0, r4
 3b0:	eb0000c9 	bl	6dc <_exit>
 3b4:	00000784 	.word	0x00000784

000003b8 <__register_exitproc>:
 3b8:	e59fc0e4 	ldr	r12, [pc, #228]	; 4a4 <__register_exitproc+0xec>
 3bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 3c0:	e59c4000 	ldr	r4, [r12]
 3c4:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 3c8:	e35c0000 	cmp	r12, #0
 3cc:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 3d0:	e59c5004 	ldr	r5, [r12, #4]
 3d4:	0584c148 	streq	r12, [r4, #328]	; 0x148
 3d8:	e355001f 	cmp	r5, #31
 3dc:	e24dd010 	sub	sp, sp, #16
 3e0:	e1a06000 	mov	r6, r0
 3e4:	da000015 	ble	440 <__register_exitproc+0x88>
 3e8:	e59f00b8 	ldr	r0, [pc, #184]	; 4a8 <__register_exitproc+0xf0>
 3ec:	e3500000 	cmp	r0, #0
 3f0:	1a000001 	bne	3fc <__register_exitproc+0x44>
 3f4:	e3e00000 	mvn	r0, #0
 3f8:	ea000018 	b	460 <__register_exitproc+0xa8>
 3fc:	e3a00e19 	mov	r0, #400	; 0x190
 400:	e58d100c 	str	r1, [sp, #12]
 404:	e58d2008 	str	r2, [sp, #8]
 408:	e58d3004 	str	r3, [sp, #4]
 40c:	e320f000 	nop	{0}
 410:	e250c000 	subs	r12, r0, #0
 414:	e59d100c 	ldr	r1, [sp, #12]
 418:	e59d2008 	ldr	r2, [sp, #8]
 41c:	e59d3004 	ldr	r3, [sp, #4]
 420:	0afffff3 	beq	3f4 <__register_exitproc+0x3c>
 424:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 428:	e3a00000 	mov	r0, #0
 42c:	e58c0004 	str	r0, [r12, #4]
 430:	e58c5000 	str	r5, [r12]
 434:	e584c148 	str	r12, [r4, #328]	; 0x148
 438:	e58c0188 	str	r0, [r12, #392]	; 0x188
 43c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 440:	e3560000 	cmp	r6, #0
 444:	e59c4004 	ldr	r4, [r12, #4]
 448:	1a000007 	bne	46c <__register_exitproc+0xb4>
 44c:	e2843002 	add	r3, r4, #2
 450:	e2844001 	add	r4, r4, #1
 454:	e78c1103 	str	r1, [r12, r3, lsl #2]
 458:	e58c4004 	str	r4, [r12, #4]
 45c:	e3a00000 	mov	r0, #0
 460:	e28dd010 	add	sp, sp, #16
 464:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 468:	e12fff1e 	bx	lr
 46c:	e3a00001 	mov	r0, #1
 470:	e1a00410 	lsl	r0, r0, r4
 474:	e08c8104 	add	r8, r12, r4, lsl #2
 478:	e3560002 	cmp	r6, #2
 47c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 480:	e5883108 	str	r3, [r8, #264]	; 0x108
 484:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 488:	e1877000 	orr	r7, r7, r0
 48c:	01830000 	orreq	r0, r3, r0
 490:	e1a05008 	mov	r5, r8
 494:	e5882088 	str	r2, [r8, #136]	; 0x88
 498:	e58c7188 	str	r7, [r12, #392]	; 0x188
 49c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 4a0:	eaffffe9 	b	44c <__register_exitproc+0x94>
 4a4:	00000784 	.word	0x00000784
 4a8:	00000000 	.word	0x00000000

000004ac <__call_exitprocs>:
 4ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 4b0:	e59f3168 	ldr	r3, [pc, #360]	; 620 <__call_exitprocs+0x174>
 4b4:	e5933000 	ldr	r3, [r3]
 4b8:	e24dd014 	sub	sp, sp, #20
 4bc:	e58d3004 	str	r3, [sp, #4]
 4c0:	e2833f52 	add	r3, r3, #328	; 0x148
 4c4:	e58d0008 	str	r0, [sp, #8]
 4c8:	e58d300c 	str	r3, [sp, #12]
 4cc:	e1a07001 	mov	r7, r1
 4d0:	e3a08001 	mov	r8, #1
 4d4:	e59d3004 	ldr	r3, [sp, #4]
 4d8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 4dc:	e3560000 	cmp	r6, #0
 4e0:	e59db00c 	ldr	r11, [sp, #12]
 4e4:	0a000033 	beq	5b8 <__call_exitprocs+0x10c>
 4e8:	e5965004 	ldr	r5, [r6, #4]
 4ec:	e2554001 	subs	r4, r5, #1
 4f0:	5286a088 	addpl	r10, r6, #136	; 0x88
 4f4:	5285501f 	addpl	r5, r5, #31
 4f8:	508a5105 	addpl	r5, r10, r5, lsl #2
 4fc:	5a000007 	bpl	520 <__call_exitprocs+0x74>
 500:	ea000029 	b	5ac <__call_exitprocs+0x100>
 504:	e5953000 	ldr	r3, [r5]
 508:	e1530007 	cmp	r3, r7
 50c:	0a000005 	beq	528 <__call_exitprocs+0x7c>
 510:	e2444001 	sub	r4, r4, #1
 514:	e3740001 	cmn	r4, #1
 518:	e2455004 	sub	r5, r5, #4
 51c:	0a000022 	beq	5ac <__call_exitprocs+0x100>
 520:	e3570000 	cmp	r7, #0
 524:	1afffff6 	bne	504 <__call_exitprocs+0x58>
 528:	e5963004 	ldr	r3, [r6, #4]
 52c:	e06a2005 	rsb	r2, r10, r5
 530:	e2433001 	sub	r3, r3, #1
 534:	e0862002 	add	r2, r6, r2
 538:	e1530004 	cmp	r3, r4
 53c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 540:	13a01000 	movne	r1, #0
 544:	05864004 	streq	r4, [r6, #4]
 548:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 54c:	e3530000 	cmp	r3, #0
 550:	0affffee 	beq	510 <__call_exitprocs+0x64>
 554:	e1a02418 	lsl	r2, r8, r4
 558:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 55c:	e1120001 	tst	r2, r1
 560:	e5969004 	ldr	r9, [r6, #4]
 564:	0a000016 	beq	5c4 <__call_exitprocs+0x118>
 568:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 56c:	e1120001 	tst	r2, r1
 570:	1a000016 	bne	5d0 <__call_exitprocs+0x124>
 574:	e59d0008 	ldr	r0, [sp, #8]
 578:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 57c:	e1a0e00f 	mov	lr, pc
 580:	e12fff13 	bx	r3
 584:	e5963004 	ldr	r3, [r6, #4]
 588:	e1530009 	cmp	r3, r9
 58c:	1affffd0 	bne	4d4 <__call_exitprocs+0x28>
 590:	e59b3000 	ldr	r3, [r11]
 594:	e1530006 	cmp	r3, r6
 598:	1affffcd 	bne	4d4 <__call_exitprocs+0x28>
 59c:	e2444001 	sub	r4, r4, #1
 5a0:	e3740001 	cmn	r4, #1
 5a4:	e2455004 	sub	r5, r5, #4
 5a8:	1affffdc 	bne	520 <__call_exitprocs+0x74>
 5ac:	e59f1070 	ldr	r1, [pc, #112]	; 624 <__call_exitprocs+0x178>
 5b0:	e3510000 	cmp	r1, #0
 5b4:	1a000009 	bne	5e0 <__call_exitprocs+0x134>
 5b8:	e28dd014 	add	sp, sp, #20
 5bc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 5c0:	e12fff1e 	bx	lr
 5c4:	e1a0e00f 	mov	lr, pc
 5c8:	e12fff13 	bx	r3
 5cc:	eaffffec 	b	584 <__call_exitprocs+0xd8>
 5d0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 5d4:	e1a0e00f 	mov	lr, pc
 5d8:	e12fff13 	bx	r3
 5dc:	eaffffe8 	b	584 <__call_exitprocs+0xd8>
 5e0:	e5963004 	ldr	r3, [r6, #4]
 5e4:	e3530000 	cmp	r3, #0
 5e8:	e5963000 	ldr	r3, [r6]
 5ec:	1a000008 	bne	614 <__call_exitprocs+0x168>
 5f0:	e3530000 	cmp	r3, #0
 5f4:	0a000006 	beq	614 <__call_exitprocs+0x168>
 5f8:	e1a00006 	mov	r0, r6
 5fc:	e58b3000 	str	r3, [r11]
 600:	e320f000 	nop	{0}
 604:	e59b6000 	ldr	r6, [r11]
 608:	e3560000 	cmp	r6, #0
 60c:	1affffb5 	bne	4e8 <__call_exitprocs+0x3c>
 610:	eaffffe8 	b	5b8 <__call_exitprocs+0x10c>
 614:	e1a0b006 	mov	r11, r6
 618:	e1a06003 	mov	r6, r3
 61c:	eafffff9 	b	608 <__call_exitprocs+0x15c>
 620:	00000784 	.word	0x00000784
 624:	00000000 	.word	0x00000000

00000628 <register_fini>:
 628:	e92d4008 	push	{r3, lr}
 62c:	e59f3010 	ldr	r3, [pc, #16]	; 644 <register_fini+0x1c>
 630:	e3530000 	cmp	r3, #0
 634:	159f000c 	ldrne	r0, [pc, #12]	; 648 <register_fini+0x20>
 638:	1bffff49 	blne	364 <atexit>
 63c:	e8bd4008 	pop	{r3, lr}
 640:	e12fff1e 	bx	lr
 644:	000007ac 	.word	0x000007ac
 648:	0000064c 	.word	0x0000064c

0000064c <__libc_fini_array>:
 64c:	e92d4038 	push	{r3, r4, r5, lr}
 650:	e59f5030 	ldr	r5, [pc, #48]	; 688 <__libc_fini_array+0x3c>
 654:	e59f4030 	ldr	r4, [pc, #48]	; 68c <__libc_fini_array+0x40>
 658:	e0654004 	rsb	r4, r5, r4
 65c:	e1b04144 	asrs	r4, r4, #2
 660:	10855104 	addne	r5, r5, r4, lsl #2
 664:	0a000004 	beq	67c <__libc_fini_array+0x30>
 668:	e5353004 	ldr	r3, [r5, #-4]!
 66c:	e1a0e00f 	mov	lr, pc
 670:	e12fff13 	bx	r3
 674:	e2544001 	subs	r4, r4, #1
 678:	1afffffa 	bne	668 <__libc_fini_array+0x1c>
 67c:	eb00004a 	bl	7ac <__libc_fini>
 680:	e8bd4038 	pop	{r3, r4, r5, lr}
 684:	e12fff1e 	bx	lr
 688:	000007c4 	.word	0x000007c4
 68c:	000007c8 	.word	0x000007c8

00000690 <__cs3_premain>:
 690:	e92d4008 	push	{r3, lr}
 694:	eb000017 	bl	6f8 <__libc_init_array>
 698:	e59f3030 	ldr	r3, [pc, #48]	; 6d0 <__cs3_premain+0x40>
 69c:	e3530000 	cmp	r3, #0
 6a0:	15930000 	ldrne	r0, [r3]
 6a4:	01a00003 	moveq	r0, r3
 6a8:	e59f3024 	ldr	r3, [pc, #36]	; 6d4 <__cs3_premain+0x44>
 6ac:	e3530000 	cmp	r3, #0
 6b0:	15931000 	ldrne	r1, [r3]
 6b4:	01a01003 	moveq	r1, r3
 6b8:	e3a02000 	mov	r2, #0
 6bc:	ebfffee6 	bl	25c <main>
 6c0:	e59f3010 	ldr	r3, [pc, #16]	; 6d8 <__cs3_premain+0x48>
 6c4:	e3530000 	cmp	r3, #0
 6c8:	1bffff2d 	blne	384 <exit>
 6cc:	eafffffe 	b	6cc <__cs3_premain+0x3c>
	...
 6d8:	00000384 	.word	0x00000384

000006dc <_exit>:
 6dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 6e0:	e3a00018 	mov	r0, #24
 6e4:	e59f1004 	ldr	r1, [pc, #4]	; 6f0 <_exit+0x14>
 6e8:	ef123456 	svc	0x00123456
 6ec:	eafffffe 	b	6ec <_exit+0x10>
 6f0:	00020026 	.word	0x00020026

000006f4 <__cs3_isr_interrupt>:
 6f4:	eafffffe 	b	6f4 <__cs3_isr_interrupt>

000006f8 <__libc_init_array>:
 6f8:	e92d4070 	push	{r4, r5, r6, lr}
 6fc:	e59f506c 	ldr	r5, [pc, #108]	; 770 <__libc_init_array+0x78>
 700:	e59f606c 	ldr	r6, [pc, #108]	; 774 <__libc_init_array+0x7c>
 704:	e0656006 	rsb	r6, r5, r6
 708:	e1b06146 	asrs	r6, r6, #2
 70c:	12455004 	subne	r5, r5, #4
 710:	13a04000 	movne	r4, #0
 714:	0a000005 	beq	730 <__libc_init_array+0x38>
 718:	e5b53004 	ldr	r3, [r5, #4]!
 71c:	e2844001 	add	r4, r4, #1
 720:	e1a0e00f 	mov	lr, pc
 724:	e12fff13 	bx	r3
 728:	e1560004 	cmp	r6, r4
 72c:	1afffff9 	bne	718 <__libc_init_array+0x20>
 730:	e59f5040 	ldr	r5, [pc, #64]	; 778 <__libc_init_array+0x80>
 734:	e59f6040 	ldr	r6, [pc, #64]	; 77c <__libc_init_array+0x84>
 738:	e0656006 	rsb	r6, r5, r6
 73c:	eb000012 	bl	78c <_init>
 740:	e1b06146 	asrs	r6, r6, #2
 744:	12455004 	subne	r5, r5, #4
 748:	13a04000 	movne	r4, #0
 74c:	0a000005 	beq	768 <__libc_init_array+0x70>
 750:	e5b53004 	ldr	r3, [r5, #4]!
 754:	e2844001 	add	r4, r4, #1
 758:	e1a0e00f 	mov	lr, pc
 75c:	e12fff13 	bx	r3
 760:	e1560004 	cmp	r6, r4
 764:	1afffff9 	bne	750 <__libc_init_array+0x58>
 768:	e8bd4070 	pop	{r4, r5, r6, lr}
 76c:	e12fff1e 	bx	lr
 770:	000007a4 	.word	0x000007a4
 774:	000007a4 	.word	0x000007a4
 778:	000007a4 	.word	0x000007a4
 77c:	000007ac 	.word	0x000007ac

Disassembly of section .rodata:

00000784 <_global_impure_ptr>:
 784:	000007f0 00000043                       ....C...

0000078c <_init>:
 78c:	e1a0c00d 	mov	r12, sp
 790:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 794:	e24cb004 	sub	r11, r12, #4
 798:	e24bd028 	sub	sp, r11, #40	; 0x28
 79c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 7a0:	e12fff1e 	bx	lr

000007a4 <__init_array_start>:
 7a4:	00000628 	.word	0x00000628

000007a8 <__frame_dummy_init_array_entry>:
 7a8:	00000208                                ....

000007ac <__libc_fini>:
 7ac:	e1a0c00d 	mov	r12, sp
 7b0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 7b4:	e24cb004 	sub	r11, r12, #4
 7b8:	e24bd028 	sub	sp, r11, #40	; 0x28
 7bc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 7c0:	e12fff1e 	bx	lr

000007c4 <__fini_array_start>:
 7c4:	000001c4 	.word	0x000001c4

000007c8 <__cs3_regions>:
 7c8:	00000000 	.word	0x00000000
 7cc:	00000040 	.word	0x00000040
 7d0:	00000040 	.word	0x00000040
 7d4:	00000be0 	.word	0x00000be0
 7d8:	00000020 	.word	0x00000020

000007dc <__cs3_regions_end>:
 7dc:	00000000 	.word	0x00000000
